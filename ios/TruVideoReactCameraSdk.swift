import TruvideoSdk
import TruvideoSdkCamera
import Foundation
import CommonCrypto

@objc(TruVideoReactCameraSdk)
class TruVideoReactCameraSdk: NSObject {
    
    @objc(multiply:withB:withResolver:withRejecter:)
    func multiply(a: Float, b: Float, resolve:RCTPromiseResolveBlock, reject:RCTPromiseRejectBlock) -> Void {
        resolve(a * b)
    }
    
    @objc(cameraInitiate:withRejecter:)
    func cameraInitiate(resolve: @escaping RCTPromiseResolveBlock, reject: @escaping RCTPromiseRejectBlock) -> Void {
        self.authenticate()
        self.cameraInitiate { cameraResult in
            resolve(cameraResult)
        }
    }
    
    private func cameraInitiate(completion: @escaping (_ cameraResult: TruvideoSdkCameraResult) -> Void) {
        DispatchQueue.main.async {
            guard let rootViewController = UIApplication.shared.keyWindow?.rootViewController else {
                print("E_NO_ROOT_VIEW_CONTROLLER", "No root view controller found")
                return
            }
            
            // Retrieving information about the device's camera functionality.
            let cameraInfo: TruvideoSdkCameraInformation = TruvideoSdkCamera.camera.getTruvideoSdkCameraInformation()
            print("Camera Info:", cameraInfo)
            
            // Configuring the camera with various parameters based on specific requirements.
            let configuration = TruvideoSdkCameraConfiguration(
                lensFacing: .back,
                flashMode: .off,
                orientation: nil,
                outputPath: "",
                frontResolutions: [],
                frontResolution: nil,
                backResolutions: [],
                backResolution: nil,
                mode: .videoAndPicture
            )
            
            rootViewController.presentTruvideoSdkCameraView(
                preset: configuration,
                onComplete: { cameraResult in
                    // Handling completion of camera
                    completion(cameraResult)
                }
            )
        }
    }
    
    func authenticate(){
           /// Verify if the user is already authenticated or if the session is active or expired..
           if(!Constant.isAuthenticated || Constant.isAuthenticationExpired){
               
               let payload = TruvideoSdk.generatePayload()
               /// The payload string is transformed into an encrypted string using the SHA256 algorithm.
               let signature = payload.toSha256String(using: Constant.secretKey)
               
               Task(operation: {
                   do{
                       ///   Initialize a session when the user is not authenticated.
                       /// - Parameters:
                       ///     - API_Key : Provided by TruVideo team
                       ///     - Payload : generated by sdk TruvideoSdk.generatePayload() every time you have to create new payload
                       ///     - Signature: encrypted string payload using the SHA256 algorithm with "secret key"
                       ///     - Secret_Key: secret key is also provided by TruVideo team
                       try await TruvideoSdk.authenticate(apiKey: Constant.apiKey, payload: payload, signature: signature)
                       try await TruvideoSdk.initAuthentication()
                   }catch {
                   }
               })
           }else{
               Task(operation: {
                   do{
                       /// Initialize a session when the user already authenticated.
                       try await TruvideoSdk.initAuthentication()
                   }catch {
                   }
               })
           }
       }
}

extension String {
    /// Calculates the HMAC-SHA256 value for a given message using a key.
    ///
    /// - Parameters:
    ///    - msg: The message for which the HMAC will be calculated.
    ///    - key: The secret key used to calculate the HMAC.
    /// - Returns: The calculated HMAC-SHA256 value in hexadecimal format.
    func toSha256String(using key: String) -> String {
        let hmac256 = CCHmacAlgorithm(kCCHmacAlgSHA256)
        var macData = Data(count: Int(CC_SHA256_DIGEST_LENGTH))
        
        key.withCString { keyCString in
            withCString { msgCString in
                macData.withUnsafeMutableBytes { macDataBytes in
                    guard let keyBytes = UnsafeRawPointer(keyCString)?.assumingMemoryBound(to: UInt8.self),
                          let msgBytes = UnsafeRawPointer(msgCString)?.assumingMemoryBound(to: UInt8.self) else {
                        return
                    }
                    
                    CCHmac(
                        hmac256,
                        keyBytes, Int(strlen(keyCString)),
                        msgBytes, Int(strlen(msgCString)),
                        macDataBytes.bindMemory(to: UInt8.self).baseAddress
                    )
                }
            }
        }
        
        return macData.map { String(format: "%02x", $0) }
            .joined()
    }
}
class Constant: NSObject{
   static let isAuthenticated = TruvideoSdk.isAuthenticated
   static let isAuthenticationExpired = TruvideoSdk.isAuthenticationExpired
   static let apiKey = "EPhPPsbv7e"
   static let secretKey = "9lHCnkfeLl"
}

